name: Shared Ruby Gem Release

on:
  workflow_call:
    inputs:
      ruby_version:
        description: 'Ruby version to use'
        required: false
        default: 'ruby'
        type: string
      gem_name:
        description: 'Name of the gem (for version detection)'
        required: true
        type: string
      version_file_path:
        description: 'Path to version.rb file'
        required: false
        default: 'lib/{gem_name}/version.rb'
        type: string
      git_user_email:
        description: 'Git user email for commits'
        required: false
        default: 'github-actions[bot]@users.noreply.github.com'
        type: string
      git_user_name:
        description: 'Git user name for commits'
        required: false
        default: 'github-actions[bot]'
        type: string
      release_command:
        description: 'Command to finalize release (e.g., bundle exec rake build:checksum)'
        required: false
        default: 'bundle exec rake build:checksum'
        type: string
      publish_command:
        description: 'Command to publish gem (e.g., bundle exec rake release)'
        required: false
        default: 'bundle exec rake release'
        type: string
      auto_merge:
        description: 'Automatically merge the release PR if checks pass'
        required: false
        default: false
        type: boolean
    secrets:
      rubygems_api_key:
        description: 'RubyGems API key for publishing'
        required: true

jobs:
  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          git config --global user.email "${{ inputs.git_user_email }}"
          git config --global user.name "${{ inputs.git_user_name }}"
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: ${{ inputs.ruby_version }}
      
      - name: Configure Bundler
        run: |
          bundle config set frozen false

      - name: Get current version
        id: current_version
        run: |
          version_file="${{ inputs.version_file_path }}"
          version_file="${version_file//\{gem_name\}/${{ inputs.gem_name }}}"
          
          # Extract module/class name and version
          module_name=$(echo "${{ inputs.gem_name }}" | sed 's/-/::/g' | sed 's/_\([a-z]\)/\u\1/g' | sed 's/^./\u&/' | sed 's/::\([a-z]\)/::\u\1/g')
          current_version=$(ruby -r ./$version_file -e "puts ${module_name}::VERSION")
          
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

      - name: Build and finalize release
        run: ${{ inputs.release_command }}
      
      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/v${{ steps.current_version.outputs.current_version }}
          base: main
          title: "Release v${{ steps.current_version.outputs.current_version }}"
          body: |
            ## 🚀 Release Preparation
            
            This PR finalizes the release for version ${{ steps.current_version.outputs.current_version }}.
            
            ### Changes Made
            - ✅ CHANGELOG.md finalized with release date
            - ✅ Gem built successfully
            - ✅ Release branch created
            
            ### Next Steps
            1. Review the changelog to ensure all changes are documented
            2. Verify the version is correct
            3. Add the `approved-release` label to this PR
            4. Merge the PR

            Once merged:
            - The release workflow will automatically publish to RubyGems.org
            - A new version will be created
            - The changelog will be prepared for the next release
            
            ---
            
            ⚠️ **Important**: Only add the `approved-release` label when ready to publish!
          labels: |
            release
            automated

      - name: Auto-merge if requested
        if: inputs.auto_merge == true && steps.create_pr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ steps.create_pr.outputs.pull-request-number }} --auto --squash
          gh pr edit ${{ steps.create_pr.outputs.pull-request-number }} --add-label approved-release

  publish-gem:
    name: Publish gem and bump version
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      github.event.pull_request.merged == true && 
      contains(github.event.pull_request.labels.*.name, 'approved-release')

    permissions:
      id-token: write
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Setup Git
        run: |
          git config --global user.email "${{ inputs.git_user_email }}"
          git config --global user.name "${{ inputs.git_user_name }}"
      
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: ${{ inputs.ruby_version }}

      - name: Configure Bundler
        run: |
          bundle config set frozen false

      - name: Release gem to RubyGems
        run: ${{ inputs.publish_command }}
        env:
          GEM_HOST_API_KEY: ${{ secrets.rubygems_api_key }}

      - name: Get new version
        id: new_version
        run: |
          version_file="${{ inputs.version_file_path }}"
          version_file="${version_file//\{gem_name\}/${{ inputs.gem_name }}}"
          
          module_name=$(echo "${{ inputs.gem_name }}" | sed 's/-/::/g' | sed 's/_\([a-z]\)/\u\1/g' | sed 's/^./\u&/' | sed 's/::\([a-z]\)/::\u\1/g')
          new_version=$(ruby -r ./$version_file -e "puts ${module_name}::VERSION")
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create Pull Request for next version
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bump-version-${{ steps.new_version.outputs.new_version }}
          base: main
          commit-message: "Bump version to ${{ steps.new_version.outputs.new_version }}"
          title: "Bump version to ${{ steps.new_version.outputs.new_version }}"
          body: |
            ## 🔄 Post-Release Version Bump

            This PR prepares the codebase for development of version ${{ steps.new_version.outputs.new_version }}.

            ### Changes Made
            - ✅ Version bumped to ${{ steps.new_version.outputs.new_version }}
            - ✅ CHANGELOG.md prepared with new Unreleased section
            - ✅ Gemfile.lock updated with new version
            - ✅ All dependencies resolved via bundle install

            ### Next Steps
            1. Review the version bump
            2. Merge this PR to continue development

            All future commits will be tracked under version ${{ steps.new_version.outputs.new_version }}.
          labels: |
            dependencies
            automated