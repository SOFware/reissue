# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: Testing

on:
  push:
    branches-ignore: [master]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["3.4"]
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.version }}
          bundler-cache: true
      - name: Update Bundle
        run: bundle check || bundle install
      - name: Set ownership
        run: |
          # this is to fix GIT not liking owner of the checkout dir
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Test with Coverage
        run: bundle exec rake
      - name: Display Coverage Summary
        if: always()
        run: |
          if [ -f coverage/.last_run.json ]; then
            echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            coverage_percent=$(jq -r '.result.line' coverage/.last_run.json)
            echo "**Coverage:** ${coverage_percent}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            # Check if coverage meets minimum threshold (50%)
            threshold=50
            if [ "$(printf '%s\n' "$threshold" "$coverage_percent" | sort -n | head -n1)" != "$threshold" ]; then
              echo "‚ö†Ô∏è Coverage (${coverage_percent}%) is below minimum threshold of ${threshold}%" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "‚úÖ Coverage meets minimum threshold of ${threshold}%" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Coverage report not found" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (!fs.existsSync('coverage/.last_run.json')) {
              console.log('Coverage report not found');
              return;
            }

            const coverage = JSON.parse(fs.readFileSync('coverage/.last_run.json', 'utf8'));
            const coveragePercent = coverage.result.line;
            const threshold = 50;
            const meetsThreshold = coveragePercent >= threshold;
            const emoji = meetsThreshold ? '‚úÖ' : '‚ö†Ô∏è';

            const comment = `## ${emoji} Code Coverage Report

            **Coverage:** ${coveragePercent}%
            **Threshold:** ${threshold}%

            ${emoji} Coverage ${meetsThreshold ? 'meets' : 'is below'} minimum threshold

            <sub>üìä [View detailed coverage report in artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})</sub>`;

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Code Coverage Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  linter:
    name: Linter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["3.4"]
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.version }}
          bundler-cache: true
      - run: bundle exec standardrb
